@{
    ViewData["Title"] = "Blog";
    ViewData["blogActive"] = "active";
}

@model BlogViewModel

<section class="inner-page">
    @foreach (var blog in Model.BlogPosts)
    {

        <div class="container">

            <article class="blog">

                <header class="entry-header">
                    <h1><a href="@blog.GetEncodedLink()">@blog.Title</a></h1>
                    <div class="entry-meta">
                        <time datetime="@blog.LastModified.ToString("s")" itemprop="dateModified">@blog.LastModified.ToString("MMMM  dd, yyyy")</time>

                        <span>|</span>

                        <a href="@blog.GetEncodedLink()#comments" itemprop="discussionUrl" title="Navi">
                            <span itemprop="commentCount">@blog.Comments.Count</span> @(@blog.Comments.Count == 1 ? "comment" : "comments")
                        </a>

                        @if (@blog.Categories.Any())
                        {
                            <span>|</span>
                            <ul class="categories">
                                <li> posted in </li>
                                @foreach (var category in blog.Categories)
                                {
                                    <li itemprop="articleSection">
                                        <a asp-controller="Blog" asp-action="Category" asp-route-category="@category.Title">@category.Title</a>
                                    </li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="entry-content">
                        @blog.Excerpt
                    </div>
                    <div class="entry-continue">
                        <a class="more-link" href="@blog.GetEncodedLink()">
                            <i class="fa fa-arrow-circle-right"></i> Read more...
                        </a>
                    </div>
                </header>


            </article>
        </div>

    }
</section>



@*


                    TEMPLATE

                    <p>
                        My passion is to design powerful and scalable software/web solutions, ranging all ends of the development spectrum, including the implementation of innovative applications, services, frameworks, and APIs. Currently my primary focus is to develop Sitecore solutions which are scalable, maintainable and that meet the high standards the industry demands.
                    </p>
                    <h2>Want to Start Your Own Blog?</h2>
                    <p>
                        My passion is to design powerful and scalable software/web solutions, ranging all ends of the development spectrum, including the implementation of innovative applications, services, frameworks, and APIs. Currently my primary focus is to develop Sitecore solutions which are scalable, maintainable and that meet the high standards the industry demands.
                        <pre>
                        <code class="language-csharp">
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> SendMessage(ContactForm form, [FromServices] ContactFormService contactFormService)
    {
        if (form != null && ModelState.IsValid)
        {
            var status = await contactFormService.SendContactMessage(form);
            Thread.Sleep(2000);
            if (status)
            {
                return ViewComponent("ContactForm");
            }
        }
        return null;
    }</code>
                        </pre>
                    </p>*@